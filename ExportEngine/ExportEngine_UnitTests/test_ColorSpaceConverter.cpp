#include "gmock/gmock.h"
#include "ColorSpaceConverter.h"

// clang-format off
std::vector<Pixel> rgbData = 
{
	{0,   0, -128}, {0,   0, -128}, {0, 0, 0}, {0, 0, 0}, {0,   0, 0}, {   0,   0,   0}, { 0,  0,  0}, {0, 0, 0}, {0, 0, 0}, {   0,   0,    0}, {0,   0, 0}, {0,   0, 0},
	{0,   0, -128}, {0,   0, -128}, {0, 0, 0}, {0, 0, 0}, {0,   0, 0}, {   0,   0,   0}, { 0,  0,  0}, {0, 0, 0}, {0, 0, 0}, {   0,   0,    0}, {0,   0, 0}, {0,   0, 0},
	{0,   0, -128}, {0,   0, -128}, {0, 0, 0}, {0, 0, 0}, {0,   0, 0}, {   0,   0,   0}, { 0,  0,  0}, {0, 0, 0}, {0, 0, 0}, {-116, 117, -118}, {0, 127, 0}, {0, 127, 0},
	{0,   0, -128}, {0,   0, -128}, {0, 0, 0}, {0, 0, 0}, {0,   0, 0}, {   0,   0,   0}, { 0,  0,  0}, {0, 0, 0}, {0, 0, 0}, {-116, 117, -118}, {0, 127, 0}, {0, 127, 0},
	{0,   0, -128}, {0,   0, -128}, {0, 0, 0}, {0, 0, 0}, {10, 50, 0}, {-100,   0, 100}, { 0, 50,-10}, {0, 0, 0}, {0, 0, 0}, { 111,  10,  112}, {0, 127, 0}, {0, 127, 0},
	{0,   0, -128}, {0,   0, -128}, {0, 0, 0}, {0, 0, 0}, {10, 50, 0}, {-100,   0, 100}, { 0, 50,-10}, {0, 0, 0}, {0, 0, 0}, {  24,  23,   22}, {0, 127, 0}, {0, 127, 0},
	{0,   0, -128}, {0,   0, -128}, {0, 0, 0}, {0, 0, 0}, {10, 50, 0}, {-100,   0, 100}, { 0, 50,-10}, {0, 0, 0}, {0, 0, 0}, {  24,  23,   22}, {0, 127, 0}, {0, 127, 0},
	{0,   0, -128}, {0,   0, -128}, {0, 0, 0}, {0, 0, 0}, {0,   0, 0}, {   0,   0,   0}, { 0,  0,  0}, {0, 0, 0}, {0, 0, 0}, {  24,  23,   22}, {0, 127, 0}, {0, 127, 0},
	{0,   0, -128}, {0,   0, -128}, {0, 0, 0}, {0, 0, 0}, {0,   0, 0}, {   0,   0,   0}, { 0,  0,  0}, {0, 0, 0}, {0, 0, 0}, {  24,  23,   22}, {0, 127, 0}, {0, 127, 0},
	{0,   0, -128}, {0,   0, -128}, {1, 2, 3}, {1, 2, 3}, {1,   2, 3}, {  88,  87,  86}, {55, 56, 52}, {1, 2, 3}, {1, 2, 3}, { 125, 126,  127}, {0, 127, 0}, {0, 127, 0},
	{127, 0,    0}, {127, 0,    0}, {127,0,0}, {127,0,0}, {127, 0, 0}, { 127,   0,   0}, {127, 0,  0}, {127,0,0}, {127,0,0}, { 127,   0,    0}, {0, 127, 0}, {0, 127, 0},
	{127, 0,    0}, {127, 0,    0}, {127,0,0}, {127,0,0}, {127, 0, 0}, { 127,   0,   0}, {127, 0,  0}, {127,0,0}, {127,0,0}, { 127,   0,    0}, {0, 127, 0}, {0, 127, 0},
};
// clang-format on

// clang-format off
std::vector<Pixel> GrayScaleData = 
{
	{-14, -14, -14}, {-14, -14, -14}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
	{-14, -14, -14}, {-14, -14, -14}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
	{-14, -14, -14}, {-14, -14, -14}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {20, 20, 20}, {74, 74, 74}, {74, 74, 74},
	{-14, -14, -14}, {-14, -14, -14}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {20, 20, 20}, {74, 74, 74}, {74, 74, 74},
	{-14, -14, -14}, {-14, -14, -14}, {0, 0, 0}, {0, 0, 0}, {32, 32, 32}, {-18, -18, -18}, { 28, 28, 28}, {0, 0, 0}, {0, 0, 0}, {51, 51, 51}, {74, 74, 74}, {74, 74, 74},
	{-14, -14, -14}, {-14, -14, -14}, {0, 0, 0}, {0, 0, 0}, {32, 32, 32}, {-18, -18, -18}, { 28, 28, 28}, {0, 0, 0}, {0, 0, 0}, {18, 18, 18}, {74, 74, 74}, {74, 74, 74},
	{-14, -14, -14}, {-14, -14, -14}, {0, 0, 0}, {0, 0, 0}, {32, 32, 32}, {-18, -18, -18}, { 28, 28, 28}, {0, 0, 0}, {0, 0, 0}, {18, 18, 18}, {74, 74, 74}, {74, 74, 74},
	{-14, -14, -14}, {-14, -14, -14}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {18, 18, 18}, {74, 74, 74}, {74, 74, 74},
	{-14, -14, -14}, {-14, -14, -14}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {18, 18, 18}, {74, 74, 74}, {74, 74, 74},
	{-14, -14, -14}, {-14, -14, -14}, {1, 1, 1}, {1, 1, 1}, {1, 1, 1}, {87, 87, 87}, {55, 55, 55}, {1, 1, 1}, {1, 1, 1}, { 125, 125,  125}, {74, 74, 74}, {74, 74, 74},
	{37, 37, 37}, {37, 37, 37}, {37, 37, 37}, {37, 37, 37}, {37, 37, 37}, {37, 37, 37}, {37, 37, 37}, {37, 37, 37}, {37, 37, 37}, {37, 37, 37}, {74, 74, 74}, {74, 74, 74},
	{37, 37, 37}, {37, 37, 37}, {37, 37, 37}, {37, 37, 37}, {37, 37, 37}, {37, 37, 37}, {37, 37, 37}, {37, 37, 37}, {37, 37, 37}, {37, 37, 37}, {74, 74, 74}, {74, 74, 74},
};
// clang-format on

bool operator!=(Pixel left, Pixel right)
{
	if(left.b == right.b and left.r == right.r and left.g == right.g)
		return true;
	else
		return false;
}

bool operator==(VideoFrame left, VideoFrame right)
{
	if(left.pixels.size() != right.pixels.size())
		return false;
	if(left.colorFormat != right.colorFormat)
		return false;
	if(left.height != right.height)
		return false;
	if(left.width != right.width)
		return false;
	for(size_t i{0}; i < left.pixels.size(); ++i)
	{
		if(left.pixels[i] != right.pixels[i])
			return false;
	}
	return true;
}

TEST(TestExportEngine, ConvertToGrayScale_RGBFrame_GrayscaledFrame)
{
	VideoFrame* pframe = new VideoFrame{12, 12, VideoFrameColorFormat::RGB, rgbData};
	std::unique_ptr<VideoFrame> frame{pframe};

	ConvertToGrayscale(frame);

	VideoFrame* expectedFrame = new VideoFrame{12, 12, VideoFrameColorFormat::RGB, GrayScaleData};
	EXPECT_EQ(*pframe, *expectedFrame);
}